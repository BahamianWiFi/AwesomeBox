pragma solidity ^0.5.0;

contract Registrar {
    
    address owner;
    
    struct Person {
        string name;
        string sex;
        uint256 ID;
        uint256 DOB;
        uint256 Passport;
        uint256 DL;
        uint256 NIB;
        uint256 BirthCertificate;
        string placeOfBirth;
        //mapping (string => address) otherInfo;
        
    }
    
    constructor () public {
        owner = msg.sender;
        persons.push(Person("", "",0 ,0, 0, 0, 0, "")); //Removes zero index of array
    }
    
    mapping (address => bool) isRegistrar;
    
    Person [] persons;
    mapping (address => bool) alreadyRegistered; //Sets mapping to determine whether or not person is already registered
    mapping (address => uint256) IDbyAddress; //Mapping to quickly get Individual ID by 
    mapping (address => bool) editApproved; //Approves Registrar to edit fields
    
    event addedPerson(string name,
                        string sex,
                        uint256 dob, 
                        uint256 dl, 
                        uint256 NIB, 
                        uint256 birthcertificate, 
                        string pob);
    //Modifier
    modifier onlyOwner(){
        require(msg.sender == owner);
        _;
    }
    
    modifier onlyNIB(){
        require(true);
        _;
    }
    
    modifier onlyPassportOffice(){
        require(true);
        _;
    }
    
    modifier onlyRoadTraffic(){
        require(true);
        _;
    }
    
    modifier onlyRegistrar(){
        require(msg.sender == owner || isRegistrar[msg.sender], "Unauthorized access.");
        _;
    }
    
    //Modifer NIB
    //Modifer Passport Only
    //Modifier Road Traffic Only
    //Upper Administration  Only
    
    //Owner Functions 
    function addRegistrar(address _addy) onlyOwner public {
        require (_addy != msg.sender) ;
        isRegistrar[_addy] = true;
    }
    
    function inactiveRegistrar(address _addy) onlyOwner public {
        require(_addy != msg.sender);
        require(!isRegistrar[_addy]);
        isRegistrar[_addy] = false;
    }
    
    function approveEdit(address _addy) onlyOwner public {
        editApproved[_addy] = true;
    }
    
    //Registrar Functions
    function addPerson( string memory _name,
                        string memory sex,
                        uint256 _dob, 
                        uint256 _dl, 
                        uint256 _NIB, 
                        uint256 _birthcertificate, 
                        string memory _pob) 
        onlyRegistrar public {
            
        Person memory person; // Setting object person
        //TODO: Adds field of person object 
        persons.push(person);
        
        emit addedPerson(persons[_ID].name,
                         persons.[_ID].sex,
                         persons[_ID.DOB]
                         persons.[_ID].Passport,
                         persons[_ID].DL,
                         persons[_ID].NIB
                         persons[_ID.BirthCertificate]
                         persons[_ID].placeOfBirth);
    }
    
    function editPersonDOB (uint256 _ID, uint _dob) public onlyRegistrar{
        require(editApproved[msg.sender], "Unauthorized Access");
        persons[_ID].DOB = _dob;
        //TODO
       emit addedPerson(persons[_ID].name,
                         persons.[_ID].sex,
                         persons[_ID.DOB]
                         persons.[_ID].Passport,
                         persons[_ID].DL,
                         persons[_ID].NIB
                         persons[_ID.BirthCertificate]
                         persons[_ID].placeOfBirth);
    }
    
    function editPersonDL (uint256 _ID, uint _dl) public onlyRegistrar{
        require(editApproved[msg.sender], "Unauthorized Access");
        persons[_ID].DL = _dl;
        //TODO
        emit addedPerson(persons[_ID].name,
                         persons.[_ID].sex,
                         persons[_ID.DOB]
                         persons.[_ID].Passport,
                         persons[_ID].DL,
                         persons[_ID].NIB
                         persons[_ID.BirthCertificate]
                         persons[_ID].placeOfBirth);
    }
    
    function editPersonNIB (uint256 _ID, uint _NIB) public onlyRegistrar{
        require(editApproved[msg.sender], "Unauthorized Access");
        persons[_ID].NIB = _NIB;
        //TODO
       emit addedPerson(persons[_ID].name,
                         persons.[_ID].sex,
                         persons[_ID.DOB]
                         persons.[_ID].Passport,
                         persons[_ID].DL,
                         persons[_ID].NIB
                         persons[_ID.BirthCertificate]
                         persons[_ID].placeOfBirth);
    }
    
    function editPersonBirthCert (uint256 _ID, uint _birthcertificate) public onlyRegistrar{
        require(editApproved[msg.sender], "Unauthorized Access");
        persons[_ID].BirthCertificate = _birthcertificate;
        //TODO
        emit addedPerson(persons[_ID].name,
                         persons.[_ID].sex,
                         persons[_ID.DOB]
                         persons.[_ID].Passport,
                         persons[_ID].DL,
                         persons[_ID].NIB
                         persons[_ID.BirthCertificate]
                         persons[_ID].placeOfBirth);
    }
    
    function editPerson (uint256 _ID, string memory _pob) public onlyRegistrar{
        require(editApproved[msg.sender], "Unauthorized Access");
        persons[_ID].placeOfBirth = _pob;
        //TODO
        emit addedPerson(persons[_ID].name,
                         persons.[_ID].sex,
                         persons[_ID.DOB]
                         persons.[_ID].Passport,
                         persons[_ID].DL,
                         persons[_ID].NIB
                         persons[_ID.BirthCertificate]
                         persons[_ID].placeOfBirth);
    }
}
