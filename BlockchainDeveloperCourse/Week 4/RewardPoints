pragma solidity >=0.4.22 <0.6.0;

contract RewardPoints {
    address private owner;
    //Admins are not able to participate in business ? Double back to this
    mapping(address => bool) private isAdmin; // Quick way to check if an addr is an Admin

    struct Merchant {
        uint id;
        address addr; // the organization's owner address
        bool isApproved;
        mapping(address => bool) isOperator; // is addr approved by Merchant as operator
    }
    Merchant[] private merchants;
    mapping(address => uint) private addrToMerchantId; // get merchantId from an addr

    struct User {
        uint id;
        address addr;
        bool isApproved;
        uint totalEarnedPoints;
        uint totalReedemedPoints;
        mapping(uint => uint) merchantToEarnedPts; // keep track of points earned from each merchant separately
        mapping(uint => uint) merchantToRedeemedPts; // keep track of points used for at each merchant
    }
    User[] private users;
    mapping(address => uint) private addrToUserId;


    // =================================
    // Events and modifiers
    // =================================
    event AddedAdmin(address indexed admin);
    event RemovedAdmin(address indexed admin);

    event AddedMerchant(address indexed merchant, uint indexed id);
    event BannedMerchant(uint indexed merchantId);
    event ApprovedMerchant(uint indexed merchantId);
    event TransferredMerchantOwnership(uint indexed merchantId, address oldOwner, address newOwner);

    event AddedOperator(uint indexed merchantId, address indexed operator);
    event RemovedOperator(uint indexed merchantId, address indexed operator);

    event AddedUser(address indexed user, uint indexed id);
    event BannedUser(address indexed user, uint indexed id);
    event ApprovedUser(address indexed user, uint indexed id);

    event RewardedUser(address indexed user, uint indexed merchantId, uint points);
    event RedeemedPoints(address indexed user, uint indexed merchantId, uint points);
    event TransferMerchantPoints(address indexed sender, address indexed recipient, uint merchantId, uint points);

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    modifier onlyAdmin() {
        require(isAdmin[msg.sender] || msg.sender == owner);
        _;
    }

    function merchantExist(uint _id) internal view returns(bool) {
        if (_id != 0 && _id < merchants.length) return true;
        return false;
    }

    function isMerchantValid(uint _id) internal view returns(bool) {
        if(merchantExist(_id) && merchants[_id].isApproved) return true;
        return false;
    }

    function isMerchantOwner(address _owner) internal view returns(bool) {
        uint id = addrToMerchantId[_owner];
        return (isMerchantValid(id) && merchants[id].addr == _owner);
    }

    modifier onlyMerchantOwner() {
        require(isMerchantOwner(msg.sender),"Merchant owner only.");
        _;
    }

    modifier onlyMerchant() {
        uint id = addrToMerchantId[msg.sender];
        bool isOperator = merchants[id].isOperator[msg.sender];
        require(isMerchantValid(id),"Merchant not authorized.");
        require(isMerchantOwner(msg.sender) || isOperator, "Merchant not authorized to operate.");
        _;
    }

    function userExist(uint _id) internal view returns(bool) {
        if(_id != 0 && _id < users.length) return true;
        return false;
    }

    function isUserValid(uint _id) internal view returns(bool) {
        if(userExist(_id) && users[_id].isApproved) return true;
        return false;
    }

    modifier onlyUser() {
        require(isUserValid(addrToUserId[msg.sender]),"You're not authorized to shop here.");
        _;
    }
    
    constructor() public {
        // Do not use ID 0 for first user and merchant to avoid returning invalid
        // first merchant/user when looking it up with addrToMerchantID mapping
        merchants.push(Merchant(0, 0, false));
        users.push(User(0, 0, false, 0, 0));
        owner = msg.sender;
    }
       

    // =================================
    // Owner Only
    // =================================
    function addAdmin(address _admin) external onlyOwner {
        require(_admin != address(0), "Invalid Address!");
        require(!merchantExist(addrToMerchantId[_admin]), "Merchants can't be Admins");
        isAdmin[_admin] = true; //Adds address to list of admins.
                                //Note: Check is this address is already admin or merchant or employee
        emit AddedAdmin(_admin);
    }

    function removeAdmin(address _admin) external onlyOwner {
        require(isAdmin[_admin], "This user is not an administrator.+");
        require(_admin != address(0), "Invalid Address!");
        isAdmin[_admin] = false;
        emit RemovedAdmin(_admin);
    }

    // =================================
    // Admin Only Actions
    // =================================
    
    function addMerchant(address _merchant) external onlyAdmin {
        require(_merchant != address(0), "Invalid Address");
        //Do I need a condition for the case when the address is already a merchant?
        Merchant memory merchant;  //Creates temp object to set field values in struct
        merchant.addr = _merchant; //Sets merchant address to function value 
        merchant.id = merchants.length; //Sets ID of merchant to its corresponding 
                                                   //array index.
        merchant.isApproved = true;
        merchants.push(merchant);  //Pushes merchant object into struct
        addrToMerchantId[_merchant] = merchants.length; //Updates addrToMerchantId mapping
        emit AddedMerchant(_merchant, addrToMerchantId[_merchant]);        
    }

    function banMerchant(uint _id) external onlyAdmin {
        require(merchantExist(_id),"Not A Merchant");
        merchants[_id].isApproved = false;
        emit BannedMerchant(_id);
    }

    function approveMerchant(uint _id) external onlyAdmin {
        require(merchantExist(_id),"Not a Merchant or not approved by administrator");
        require(!merchants[_id].isApproved, "Merchant already approved");
        merchants[_id].isApproved = true;
        emit ApprovedMerchant(_id);
    }

    function addUser(address _user) external onlyAdmin {
        User memory user;  //Creates temp object to set field values in struct
        user.addr = _user; //Sets user address to function value 
        user.id = users.length; //Sets ID of user to its corresponding array index.
        user.isApproved = true; //Approves user to shop
        user.totalEarnedPoints = 0; //Sets User's Earned Points
        user.totalReedemedPoints = 0; //Sets User's Earned Points
        users.push(user);  //Pushes user object into struct
        addrToUserId[_user] = users.length; //Updates addrToUserId mapping
        emit AddedUser(_user, addrToUserId[_user]);
    }

    function banUser(address _user) external onlyAdmin {
        require(_user != address(0), "Invalid Address!");
        require(isUserValid(addrToUserId[_user]), "I'm sorry, but you can't use double tap on the ban");
        users[addrToUserId[_user]].isApproved = false;
        emit BannedUser(_user, addrToUserId[_user]);
    }

    function approveUser(address _user) external onlyAdmin {
        require(_user != address(0), "Invalid Address");
        users[addrToUserId[_user]].isApproved = true;
        emit ApprovedUser(_user, addrToUserId[_user]);
    }

    // =================================
    // Merchant Owner Only Actions
    // =================================
    function addOperator(address _operator) external onlyMerchantOwner {
        require(_operator != address(0), "You're crazy ! This isn't a valid address.");
        merchants[addrToMerchantId[msg.sender]].isOperator[_operator] = true; 
        //Approving Operator via their address
        addrToMerchantId[_operator] = addrToMerchantId[msg.sender]; 
        //Updating Address mapping of operator
        emit AddedOperator(addrToMerchantId[msg.sender], _operator);
    }

    function removeOperator(address _operator) external onlyMerchantOwner {
        require(_operator != address(0), "Invalid Address");
        merchants[addrToMerchantId[msg.sender]].isOperator[_operator] = false; 
        //Banning Operator via their address
        emit RemovedOperator(addrToMerchantId[msg.sender], _operator);
    }

    function transferMerchantOwnership(address _newAddr) external onlyMerchantOwner {
         require(_newAddr != address(0), "Invalid Address");
         merchants[addrToMerchantId[msg.sender]].addr = _newAddr; //Changing owner's address to new owner's address.
         merchants[addrToMerchantId[_newAddr]].id = merchants[addrToMerchantId[msg.sender]].id;
         //Giving new owner the old owner's ID
         addrToMerchantId[_newAddr] = addrToMerchantId[msg.sender]; //Updating the address to ID mapping
         addrToMerchantId[msg.sender] = 0; // Nullifying previous owner's
         emit TransferredMerchantOwnership(addrToMerchantId[msg.sender], msg.sender, _newAddr);
    }

    // =================================
    // Merchant only actions
    // =================================
    function rewardUser(address _user, uint _points) external onlyMerchant {
         require(_user != address(0), "Invalid Address");
         users[addrToUserId[_user]].totalEarnedPoints += _points; //Updates User's total earned points accross all merchants
         users[addrToUserId[_user]].merchantToEarnedPts[addrToMerchantId[msg.sender]] += _points; 
         //Updates User's total earned points for this particular merchant i.e msg.sender
         emit RewardedUser(_user, addrToMerchantId[msg.sender], _points);
    }

    // =================================
    // User only action
    // =================================
    function redeemPoints(uint _mId, uint _points) external onlyUser {
        require(getUserEarnedPointsAtMerchant(msg.sender, _mId) > _points,
        "You don't have enough points at this merchant for this transaction."
        );
        uint userid = addrToUserId[msg.sender];
        users[userid].merchantToEarnedPts[_mId] -= _points; 
        //Updating Total Earned Points at this merchant Balance
        users[addrToUserId[msg.sender]].totalEarnedPoints -= _points; //Updating absolute total earned points 
        users[addrToUserId[msg.sender]].totalReedemedPoints += _points;
        //Updates User's total redeemed points accross all merchants
        users[userid].merchantToRedeemedPts[_mId] += _points; 
        //Updates User's total redeemed points for this particular merchant i.e msg.sender
        emit RedeemedPoints(msg.sender, _mId, _points);
    }
    
    function TransferMerchantPointsFrom(uint _mID, uint _uID, uint _points) external onlyUser{
        require(isMerchantValid(_mID), "Invalid Merchant ID.");
        require(isUserValid(_uID),"Invalid User ID");
        require(getUserEarnedPointsAtMerchant(msg.sender, _points) > _points, "It's the thought that counts.");
        uint userid = addrToUserId[msg.sender];
        users[userid].totalEarnedPoints -= _points; //Update msg.sender's absolute total earned points balance
        users[userid].merchantToEarnedPts[_mID] -= _points; //Update msg.sender's total earned points balance at merchant
        users[_uID].totalEarnedPoints += _points; //Update recipient user's absolute total earned points balance
        users[_uID].merchantToEarnedPts[_mID] += _points; //Update recipient user's total earned points balance at merchant
        emit TransferMerchantPoints(msg.sender, users[_uID].addr, _mID, _points);
    }

    // =================================
    // Getters
    // =================================

    function getMerchantById(uint _id) public view returns(uint, address, bool) {
        require(merchantExist(_id));
        Merchant storage m = merchants[_id];
        return(m.id, m.addr, m.isApproved);
    }

    function getMerchantByAddr(address _addr) public view returns(uint, address, bool) {
        uint id = addrToMerchantId[_addr];
        return getMerchantById(id);
    }

    function isMerchantOperator(address _operator, uint _mId) public view returns(bool) {
        require(merchantExist(_mId));
        return merchants[_mId].isOperator[_operator];
    }

    function getUserById(uint _id) public view returns(uint, address, bool, uint, uint) {
        require(userExist(_id));
        User storage u = users[_id];
        return(u.id, u.addr, u.isApproved, u.totalEarnedPoints, u.totalReedemedPoints);
    }

    function getUserByAddr(address _addr) public view returns(uint, address, bool, uint, uint) {
        uint id = addrToUserId[_addr];
        return getUserById(id);
    }

    function getUserEarnedPointsAtMerchant(address _user, uint _mId) public view returns(uint) {
        uint uId = addrToUserId[_user];
        require(userExist(uId));
        require(merchantExist(_mId));
        return users[uId].merchantToEarnedPts[_mId];
    }

    function getUserRedeemedPointsAtMerchant(address _user, uint _mId) public view returns(uint) {
        uint uId = addrToUserId[_user];
        require(userExist(uId));
        require(merchantExist(_mId));
        return users[uId].merchantToRedeemedPts[_mId];
    }

}
