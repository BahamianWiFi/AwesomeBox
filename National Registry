pragma solidity ^0.5.0;

contract Registrar {
    
    struct Person {
        string name;
        uint256 DOB;
        uint256 PassportNo;
        uint256 DriverLicense;
        uint256 NIBNo;
        uint256 BirthCertificate;
        string placeOfBirth;
    }
    
    constructor () public {
        owner = msg.sender;
    }
    
    mappping(address => bool) isRegistrar;
    
    Person [] persons;
    mapping (address => bool) alreadyRegistered;
    //Modifiers
    
    modifier onlyOwner(){
        require(msg.sender = owner);
    }
    modifier onlyNIB(){
        require(true);
        _;
    }
    
    modifier onlyPassportOffice(){
        require(true);
        _;
    }
    
    modifier onlyRoadTraffic(){
        require(true);
        _;
    }
    
    modifier onlyRegistrar(){
        require(msg.sender = owner || isRegistrar[msg.sender], "Unauthorized access.")
        _;
    }
    
    //Modifer NIB
    //Modifer Passport Only
    //Modifier Road Traffic Only
    //Upper Administration  Only
    
    //Owner Functions 
    function addRegistrar(address _addy) onlyOwner {
        require (_addy != msg.sender) ;
        isRegistrar[_addy] = true;
    }
    
    function inactiveRegistrar(address _addy) onlyOwner {
        require(_addy != msg.sender);
        require(!isRegistrar[_addy]);
        isRegistrar[_addy] = false;
        
    }
    
    //Registrar Functions
    function addPerson(string _name, uint256 _dob, uint256){
        Person memory person; // Setting object
        
    }
    
    
